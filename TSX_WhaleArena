import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import LoginPage from './components/LoginPage';
import LoadingPage from './components/LoadingPage';
import MainPage from './components/MainPage';
import CurrentProgress from './components/CurrentProgress';
import ExploreWave from './components/ExploreWave';
import StudentProfile from './components/StudentProfile';
import SocialLinks from './components/SocialLinks';
import DiscoverCreate from './components/DiscoverCreate';
import NavigationBar from './components/NavigationBar';
type Page = 'login' | 'loading' | 'main' | 'progress' | 'explore' | 'profile' | 'social' | 'discover';
interface Student {
id: string;
name: string;
email: string;
branch: string;
year: string;
college: string;
totalWebathons: number;
currentTeam?: string;
}
interface Ripple {
id: number;
x: number;
y: number;
intensity: number;
}
export default function App() {
const [currentPage, setCurrentPage] = useState<Page>('login');
const [student, setStudent] = useState<Student | null>(null);
const [cursorPos, setCursorPos] = useState({ x: 0, y: 0 });
const [ripples, setRipples] = useState<Ripple[]>([]);
const [trailPositions, setTrailPositions] = useState<Array<{ x: number; y: number }>>([]);
const [isMoving, setIsMoving] = useState(false);
const mockStudent: Student = {
id: '1',
name: 'Sabina Nadar',
email: 'sabina.nadar@college.edu',
branch: 'Computer Science',
year: 'Final Year',
college: 'Thakur College of Engineering',
totalWebathons: 8,
currentTeam: 'Ocean Innovators'
};
useEffect(() => {
let moveTimer: NodeJS.Timeout;
const handleMouseMove = (e: MouseEvent) => {
const newPos = { x: e.clientX, y: e.clientY };
setCursorPos(newPos);
setIsMoving(true);
// Update trail positions with smoother interpolation
setTrailPositions(prev => {
const newTrail = [newPos, ...prev.slice(0, 8)];
return newTrail;
});
clearTimeout(moveTimer);
moveTimer = setTimeout(() => setIsMoving(false), 100);
};
const handleClick = (e: MouseEvent) => {
const intensity = Math.random() * 0.5 + 0.5; // Random intensity between 0.5-1
const newRipple: Ripple = {
id: Date.now() + Math.random(),
x: e.clientX,
y: e.clientY,
intensity
};
setRipples(prev => [...prev, newRipple]);
setTimeout(() => {
setRipples(prev => prev.filter(ripple => ripple.id !== newRipple.id));
}, 2000);
};
document.addEventListener('mousemove', handleMouseMove);
document.addEventListener('click', handleClick);
return () => {
document.removeEventListener('mousemove', handleMouseMove);
document.removeEventListener('click', handleClick);
clearTimeout(moveTimer);
};
}, []);
const handleLogin = (credentials: { username: string; password: string }) => {
setStudent(mockStudent);
setCurrentPage('loading');
};
const handleLoadingComplete = () => {
setCurrentPage('main');
};
const navigateTo = (page: Page) => {
setCurrentPage(page);
};
const handleLogout = () => {
setStudent(null);
setCurrentPage('login');
};
const pageVariants = {
initial: {
opacity: 0,
scale: 0.96,
filter: 'blur(15px)',
y: 30,
rotateX: 5
},
in: {
opacity: 1,
scale: 1,
filter: 'blur(0px)',
y: 0,
rotateX: 0
},
out: {
opacity: 0,
scale: 1.04,
filter: 'blur(15px)',
y: -30,
rotateX: -5
}
};
const pageTransition = {
type: 'spring',
stiffness: 150,
damping: 20,
mass: 0.5,
duration: 1
};
// Don't show navigation on login and loading pages
const showNavigation = currentPage !== 'login' && currentPage !== 'loading';
return (
<div className="min-h-screen bg-gradient-to-br from-black via-blue-900 to-purple-900
relative overflow-hidden cursor-none">
{/* Enhanced Custom Cursor */}
<motion.div
className="fixed pointer-events-none z-50 mix-blend-screen"
animate={{
x: cursorPos.x - 15,
y: cursorPos.y - 15,
}}
transition={{
type: 'spring',
stiffness: 1000,
damping: 35,
mass: 0.2
}}
>
{/* Main cursor ring */}
<motion.div
className="w-8 h-8 border-2 border-cyan-400 rounded-full relative"
animate={{
scale: isMoving ? [1, 1.2, 1] : [1, 1.1, 1],
rotate: [0, 360],
borderColor: [
'rgba(6, 182, 212, 0.8)',
'rgba(139, 92, 246, 0.8)',
'rgba(59, 130, 246, 0.8)',
'rgba(6, 182, 212, 0.8)'
]
}}
transition={{
scale: { duration: 0.6, ease: 'easeOut' },
rotate: { duration: 8, repeat: Infinity, ease: 'linear' },
borderColor: { duration: 3, repeat: Infinity, ease: 'easeInOut' }
}}
>
{/* Inner glow */}
<motion.div
className="absolute inset-2 bg-gradient-to-br from-cyan-400/30 to-purple-500/30
rounded-full"
animate={{
opacity: isMoving ? [0.3, 0.8, 0.3] : [0.2, 0.5, 0.2],
scale: [0.8, 1.2, 0.8]
}}
transition={{ duration: 2, repeat: Infinity, ease: 'easeInOut' }}
/>
{/* Center dot */}
<motion.div
className="absolute inset-1/2 w-1 h-1 bg-cyan-300 rounded-full transform
-translate-x-1/2 -translate-y-1/2"
animate={{
scale: isMoving ? [1, 1.5, 1] : [0.8, 1, 0.8],
opacity: [0.6, 1, 0.6]
}}
transition={{ duration: 1.5, repeat: Infinity, ease: 'easeInOut' }}
/>
</motion.div>
</motion.div>
{/* Enhanced Cursor Trail */}
{trailPositions.map((pos, index) => (
<motion.div
key={index}
className="fixed rounded-full pointer-events-none z-40 mix-blend-screen"
style={{
width: Math.max(2, 8 - index),
height: Math.max(2, 8 - index),
background: `radial-gradient(circle, rgba(6, 182, 212, ${Math.max(0.1, 0.6 - index *
0.1)}) 0%, transparent 70%)`
}}
animate={{
x: pos.x - Math.max(1, 4 - index * 0.5),
y: pos.y - Math.max(1, 4 - index * 0.5),
scale: isMoving ? [0.8, 1.2, 0.8] : [0.5, 1, 0.5]
}}
transition={{
x: { type: 'spring', stiffness: 200 - index * 20, damping: 25 + index * 3 },
y: { type: 'spring', stiffness: 200 - index * 20, damping: 25 + index * 3 },
scale: { duration: 1 + index * 0.2, repeat: Infinity, ease: 'easeInOut' }
}}
/>
))}
{/* Enhanced Click Ripples */}
{ripples.map(ripple => (
<motion.div
key={ripple.id}
className="fixed pointer-events-none z-30"
style={{ left: ripple.x - 100, top: ripple.y - 100 }}
>
{/* Primary ripple wave */}
<motion.div
className="absolute border-2 rounded-full"
style={{
borderColor: `rgba(6, 182, 212, ${0.8 * ripple.intensity})`,
boxShadow: `0 0 20px rgba(6, 182, 212, ${0.3 * ripple.intensity})`
}}
initial={{ width: 20, height: 20, opacity: 1 }}
animate={{
width: 200,
height: 200,
opacity: 0,
borderColor: [
`rgba(6, 182, 212, ${0.8 * ripple.intensity})`,
`rgba(139, 92, 246, ${0.6 * ripple.intensity})`,
`rgba(59, 130, 246, ${0.4 * ripple.intensity})`,
`rgba(6, 182, 212, 0)`
]
}}
transition={{ duration: 1.5, ease: [0.25, 0.46, 0.45, 0.94] }}
/>
{/* Secondary ripple */}
<motion.div
className="absolute border rounded-full"
style={{
borderColor: `rgba(139, 92, 246, ${0.6 * ripple.intensity})`
}}
initial={{ width: 40, height: 40, opacity: 0.8 }}
animate={{
width: 120,
height: 120,
opacity: 0
}}
transition={{ duration: 1, delay: 0.2, ease: 'easeOut' }}
/>
{/* Energy burst */}
<motion.div
className="absolute bg-gradient-radial from-cyan-400/40 to-transparent
rounded-full"
initial={{ width: 10, height: 10, opacity: 1 }}
animate={{
width: 80,
height: 80,
opacity: 0
}}
transition={{ duration: 0.8, ease: 'easeOut' }}
/>
{/* Particle explosion */}
{[...Array(6)].map((_, i) => (
<motion.div
key={i}
className="absolute w-1 h-1 bg-cyan-400 rounded-full"
style={{
left: 99,
top: 99
}}
initial={{ scale: 0, opacity: 1 }}
animate={{
scale: [0, 1, 0],
opacity: [1, 0.8, 0],
x: Math.cos((i / 6) * Math.PI * 2) * 60,
y: Math.sin((i / 6) * Math.PI * 2) * 60,
}}
transition={{
duration: 1.2,
delay: 0.1,
ease: 'easeOut'
}}
/>
))}
</motion.div>
))}
{/* Enhanced global animated background elements */}
<div className="fixed inset-0 pointer-events-none">
{/* Improved moving gradient background */}
<motion.div
animate={{
background: [
'radial-gradient(circle at 20% 30%, rgba(6, 182, 212, 0.12) 0%, transparent 60%)',
'radial-gradient(circle at 80% 70%, rgba(139, 92, 246, 0.12) 0%, transparent 60%)',
'radial-gradient(circle at 50% 20%, rgba(59, 130, 246, 0.12) 0%, transparent 60%)',
'radial-gradient(circle at 30% 80%, rgba(168, 85, 247, 0.12) 0%, transparent 60%)',
'radial-gradient(circle at 70% 40%, rgba(6, 182, 212, 0.12) 0%, transparent 60%)',
]
}}
transition={{
duration: 25,
repeat: Infinity,
repeatType: 'loop',
ease: 'easeInOut'
}}
className="absolute inset-0"
/>
{/* Enhanced floating particles */}
{[...Array(15)].map((_, i) => (
<motion.div
key={i}
className="absolute rounded-full mix-blend-screen"
style={{
width: 2 + (i % 3),
height: 2 + (i % 3),
background: `radial-gradient(circle, rgba(6, 182, 212, ${0.3 + (i % 3) * 0.1}) 0%,
transparent 70%)`
}}
animate={{
x: [0, 300, -100, 0],
y: [0, -200, -400, 0],
opacity: [0, 0.8, 0.3, 0],
scale: [0.5, 1.5, 1, 0.5],
}}
transition={{
duration: 12 + i * 2,
repeat: Infinity,
delay: i * 1.5,
ease: 'easeInOut'
}}
style={{
left: `${5 + i * 6}%`,
top: `${20 + i * 5}%`,
}}
/>
))}
</div>
{/* Navigation Bar */}
{showNavigation && student && (
<NavigationBar
currentPage={currentPage}
onNavigate={navigateTo}
onLogout={handleLogout}
student={student}
/>
)}
{/* Main Content */}
<div className={showNavigation ? 'pt-32' : ''}>
<AnimatePresence mode="wait">
{currentPage === 'login' && (
<motion.div
key="login"
initial="initial"
animate="in"
exit="out"
variants={pageVariants}
transition={pageTransition}
>
<LoginPage onLogin={handleLogin} />
</motion.div>
)}
{currentPage === 'loading' && (
<motion.div
key="loading"
initial="initial"
animate="in"
exit="out"
variants={pageVariants}
transition={pageTransition}
>
<LoadingPage onComplete={handleLoadingComplete} />
</motion.div>
)}
{currentPage === 'main' && student && (
<motion.div
key="main"
initial="initial"
animate="in"
exit="out"
variants={pageVariants}
transition={pageTransition}
>
<MainPage student={student} onNavigate={navigateTo} />
</motion.div>
)}
{currentPage === 'progress' && student && (
<motion.div
key="progress"
initial="initial"
animate="in"
exit="out"
variants={pageVariants}
transition={pageTransition}
>
<CurrentProgress student={student} onBack={() => navigateTo('main')} />
</motion.div>
)}
{currentPage === 'explore' && (
<motion.div
key="explore"
initial="initial"
animate="in"
exit="out"
variants={pageVariants}
transition={pageTransition}
>
<ExploreWave onBack={() => navigateTo('main')} />
</motion.div>
)}
{currentPage === 'profile' && student && (
<motion.div
key="profile"
initial="initial"
animate="in"
exit="out"
variants={pageVariants}
transition={pageTransition}
>
<StudentProfile student={student} onBack={() => navigateTo('main')} />
</motion.div>
)}
{currentPage === 'social' && student && (
<motion.div
key="social"
initial="initial"
animate="in"
exit="out"
variants={pageVariants}
transition={pageTransition}
>
<SocialLinks student={student} onBack={() => navigateTo('main')} />
</motion.div>
)}
{currentPage === 'discover' && (
<motion.div
key="discover"
initial="initial"
animate="in"
exit="out"
variants={pageVariants}
transition={pageTransition}
>
<DiscoverCreate onBack={() => navigateTo('main')} />
</motion.div>
)}
</AnimatePresence>
</div>
</div>
);
}
